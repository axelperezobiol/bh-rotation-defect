(*get Fock basis of states for a number of sites and particles*)

getBasis[siteNum_, particleNum_] := 
 ReverseSort@
  Catenate[Permutations[PadRight[#, siteNum]] & /@ 
    IntegerPartitions[particleNum, siteNum]]

(*get the Hamiltonian matrix with couplingConst = particle \
interaction, couplingConst2 = extra repulsion/attraction in site 1, \
Omega = lattice rotation or magnetic flux*)

getMatrix[basis_, couplingConst_, couplingConst2_, siteNum_, Omega_] :=
  With[{basisNumRange = Range@Length@basis}, SparseArray@Join[
    kineticPart[basis, AssociationThread[basis -> basisNumRange], 
     basisNumRange, Exp[I*2. \[Pi]*Omega/siteNum], 
     Exp[-I*2. \[Pi]*Omega/siteNum]],
    interactionPart[basis, couplingConst, couplingConst2, 
     basisNumRange]]]

interactionPart[basis_, couplingConst_, couplingConst2_, 
  basisNumRange_] := 
 MapThread[{#1, #1} -> #2 &, {basisNumRange, (0.5*couplingConst*
        Sum[i*(i - 1), {i, #}] + couplingConst2*#[[1]]) & /@ basis}]

kineticPart[basis_, positionMap_, basisNumRange_, phaseplus_, 
  phaseminus_] := 
 Catenate@MapThread[
    kineticPartMapFunc]@{Apply[{positionMap[#1], #2} &, 
     DeleteCases[{_, 0}] /@ 
      Transpose[{opADagAState[basis], 
        opADagAValue[basis, phaseplus, phaseminus]}, {3, 1, 2}], {2}],
     basisNumRange}
opADagAState[basis_] := 
 With[{len = Length@First@basis}, 
  Outer[Plus, basis, #, 1] &@
   Catenate[
    NestList[RotateRight, PadRight[#, len], 
       len - 1] & /@ {{1, -1}, {-1, 1}}]]
opADagAValue[basis_, phaseplus_, phaseminus_] := 
 Chop@(Join[-Sqrt[(#1 + 1.)*#2] phaseplus & @@@ #, -Sqrt[(#1 + 
                1.)*#2] phaseminus & @@@ Reverse[#, {2}]] &@
      Partition[#, 2, 1, 1]) & /@ basis
kineticPartMapFunc[stateValuePairs_, 
  index_] := ({index, #1} -> #2) & @@@ stateValuePairs

(*obtain the eigenvalues and eigenvectors of the Hamiltonian matrix*)

getEigensystem[matrix_, 
  num_: 1] := -Eigensystem[N[-matrix], num, 
   Method -> {"Arnoldi", "Criteria" -> "RealPart", 
     "MaxIterations" -> 4000}]
getGroundEigensystem[matrix_] := First /@ getEigensystem[matrix, 1]

(*get singel particle density matrix*)

getSPDM[state_, basis_, {i_, i_}] := 
 state\[Conjugate].(basis[[All, i]]*state)
getSPDM[groundState_, basis_, {i_, j_}] := 
 Total@Merge[
   AssociationThread /@ {basis -> 
      groundState, (basis + 
        ConstantArray[
         ReplacePart[
          ConstantArray[0, Length@First@basis], {i -> 1, j -> -1}], 
         Length@basis]) -> (Sqrt[(#[[i]] + 1.)*#[[j]]] & /@ basis)*
       groundState}, getSPDMMergeFunc]

(*SPDM for different states*)

getSPDM2[state1_, state2_, basis_, {i_, i_}] := 0.
getSPDM2[state1_, state2_, basis_, {i_, j_}] := 
 Total@Merge[
   AssociationThread /@ {basis -> 
      state1, (basis + 
        ConstantArray[
         ReplacePart[
          ConstantArray[0, Length@First@basis], {i -> 1, j -> -1}], 
         Length@basis]) -> (Sqrt[(#[[i]] + 1.)*#[[j]]] & /@ basis)*
       state2}, getSPDMMergeFunc]
getSPDMMergeFunc[{a_}] := 0.
getSPDMMergeFunc[{a_, b_}] := a\[Conjugate]*b

(*to obtain the condensate fraction*)

getCondensateFraction[groundState_, basis_, siteNum_, particleNum_] :=
  With[{eval = 
    Table[getSPDM[groundState, basis, {1, i}], {i, 2, 
      Ceiling[(siteNum + 1)/2]}]}, 
  First[Eigenvalues[#, 1]]/particleNum &@
   NestList[RotateRight, 
    Join[{1.}, eval, Reverse[eval][[2 - Mod[siteNum, 2] ;;]]], 
    siteNum - 1]]

getCondensateFractionFull[groundState_, basis_, siteNum_, 
  particleNum_] := 
 With[{eval = 
    Table[getSPDM[groundState, basis, {i, j}], {i, 1, siteNum}, {j, 1,
       i}]}, First[Eigenvalues[#, 1]]/particleNum &@(MapThread[
     Join, {eval, Rest /@ Flatten[eval\[Conjugate], {{2}, {1}}]}])]

(*momentum*)

getMomentum[state_, basis_, {i_, j_}] := 
 With[{ii = Mod[i, Length@First@basis, 1], 
   jj = Mod[j, Length@First@basis, 1]}, 
  1/I (getSPDM[state, basis, {ii, jj}] - 
     getSPDM[state, basis, {jj, ii}])]

(*occupation*)

getOccupation[groundState_, basis_, i_: 1] := 
 With[{groundStateSq = groundState\[Conjugate]*groundState, 
   basisAtI = basis[[All, i]]}, groundStateSq.basisAtI]
getOccupation2[state1_, state2_, basis_, i_: 1] := 
 With[{groundStateSq = state1\[Conjugate]*state2, 
   basisAtI = basis[[All, i]]}, groundStateSq.basisAtI]
getOccupationVariance[groundState_, basis_, i_: 1] := 
 With[{groundStateSq = groundState*groundState, 
   basisAtI = basis[[All, i]]}, 
  Sqrt[groundStateSq.(basisAtI*basisAtI) - (groundStateSq.basisAtI)^2]]
getOccupationVarianceij[State_, basis_, i_: 1, j_] := 
 With[{StateSq = State\[Conjugate]*State, 
   basisAtIJ = Total[basis[[All, i ;; j]], {2}]}, 
  Sqrt[StateSq.(basisAtIJ^2) - (StateSq.basisAtIJ)^2]]

